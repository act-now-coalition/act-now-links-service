name: Firebase functions deploy

env:
  # Name of firebase project to deploy to. If on develop, use dev project, if on main use prod.
  # Production and develop projects are configured in `.firebaserc`
  FIREBASE_PROJECT: ${{ ( github.ref_name == 'smcclure17/prod-instance') && 'production' || 'develop' }}

on:
  push:
    branches: [smcclure17/prod-instance, develop]
  workflow_dispatch:

# Choose Github environment Firebase project to use. 
# See: https://www.codewrecks.com/post/github/choose-environment-from-branch/.
# Github environment and Firebase project names must match 1:1, with a valid service account
# key in the repository secrets labeled FIREBASE_SERVICE_ACCOUNT.
jobs:
  get-environment:
    runs-on: ubuntu-latest
    steps:
    - name: Choose production or develop environment based on branch.
      id: environment_check
      run: |
        echo "Running on branch ${{ github.ref_name }}"
        if [ "${{ github.ref_name }}" = "smcclure17/prod-instance" ]; then
          echo echo "{env_name}={production}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_name }}" = "develop" ]; then
          echo echo "{env_name}={develop}" >> $GITHUB_OUTPUT
        else
            echo "Invalid branch name" && exit 1
        fi
    - run: echo "Using variable ${{ steps.environment_check.outputs.env_name }}"
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}

  deploy-functions:
    needs: [get-environment]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.get-environment.outputs.env_name }}
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v2
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
      - name: Install dependencies
        run: yarn global add firebase-tools && yarn install
      - name: Deploy functions
        run: |
          echo "Deploying to ${{ env.FIREBASE_PROJECT }}..."
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT }}
          echo "Finished deploy to ${{ env.FIREBASE_PROJECT }}."
